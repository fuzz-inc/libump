/***********************************************************************//**
	@file
***************************************************************************/
#include "ump/thread/Condition.hpp"

namespace ump {
namespace thread {
/***********************************************************************//**
	@brief 
***************************************************************************/
Condition::Condition()
  : ready_(false)
{
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void Condition::notify() {
  {
    std::lock_guard<std::mutex> lock(mutex_);
    ready_ = true;
  }
  condition_.notify_one();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void Condition::wait() {
  std::unique_lock<std::mutex> lock(mutex_);
  condition_.wait(lock, 
                  [&]() {
                    return ready_; 
                  });
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool Condition::wait(int ms) {
  std::unique_lock<std::mutex> lock(mutex_);
  return condition_.wait_for(lock, 
                             std::chrono::milliseconds(ms), 
                             [&]() {
                               return ready_;
                             });
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void Condition::reset() {
  std::unique_lock<std::mutex> lock(mutex_);
  ready_ = false;
}
/***********************************************************************//**
	$Id$
***************************************************************************/
}
}
