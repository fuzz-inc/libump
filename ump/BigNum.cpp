/***********************************************************************//**
	@file
***************************************************************************/
#include "ump/BigNum.hpp"

namespace ump {
/***********************************************************************//**
	@brief デフォルトコンストラクタ
***************************************************************************/
BigNum::BigNum()
  : bigNum_(BN_new())
{
}
/***********************************************************************//**
	@brief コンストラクタ
	@param[in] value 整数値
***************************************************************************/
BigNum::BigNum(int value)
  : BigNum()
{
  if(value >= 0) {
    BN_set_word(bigNum_, value);
  }
  else {
    BN_set_word(bigNum_, -value);
    BN_set_negative(bigNum_, 1);
  }
}
/***********************************************************************//**
	@brief コンストラクタ
	@param[in] string 数値を表す文字列
***************************************************************************/
BigNum::BigNum(const char* string)
  : BigNum()
{
  BN_dec2bn(&bigNum_, string);
}
/***********************************************************************//**
	@brief コンストラクタ
	@param[in] string 数値を表す文字列
***************************************************************************/
BigNum::BigNum(const std::string& string)
  : BigNum(string.c_str())
{
}
/***********************************************************************//**
	@brief コピーコンストラクタ
	@param[in] src コピー元
***************************************************************************/
BigNum::BigNum(const BigNum& src)
  : bigNum_(BN_dup(src.bigNum_))
{
}
/***********************************************************************//**
	@brief デストラクタ
***************************************************************************/
BigNum::~BigNum() {
  BN_free(bigNum_);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator=(const BigNum& src) {
  BN_free(bigNum_);
  bigNum_ = BN_dup(src.bigNum_);
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum BigNum::operator+(const BigNum& rhs) const {
  BigNum result;
  BN_add(result.bigNum_, bigNum_, rhs.bigNum_);
  return result;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum BigNum::operator-(const BigNum& rhs) const {
  BigNum result;
  BN_sub(result.bigNum_, bigNum_, rhs.bigNum_);
  return result;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum BigNum::operator*(const BigNum& rhs) const {
  BigNum result;
  Ctx ctx;
  BN_mul(result.bigNum_, bigNum_, rhs.bigNum_, ctx.get());
  return result;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum BigNum::operator/(const BigNum& rhs) const {
  BigNum result;
  Ctx ctx;
  BN_div(result.bigNum_, nullptr, bigNum_, rhs.bigNum_, ctx.get());
  return result;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum BigNum::operator%(const BigNum& rhs) const {
  BigNum result;
  Ctx ctx;
  BN_mod(result.bigNum_, bigNum_, rhs.bigNum_, ctx.get());
  return result;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator+=(const BigNum& rhs) {
  BN_add(bigNum_, bigNum_, rhs.bigNum_);
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator-=(const BigNum& rhs) {
  BN_sub(bigNum_, bigNum_, rhs.bigNum_);
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator*=(const BigNum& rhs) {
  Ctx ctx;
  BN_mul(bigNum_, bigNum_, rhs.bigNum_, ctx.get());
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator/=(const BigNum& rhs) {
  Ctx ctx;
  BN_div(bigNum_, nullptr, bigNum_, rhs.bigNum_, ctx.get());
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
BigNum& BigNum::operator%=(const BigNum& rhs) {
  Ctx ctx;
  BN_mod(bigNum_, bigNum_, rhs.bigNum_, ctx.get());
  return *this;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
int BigNum::compare(const BigNum& rhs) const {
  return BN_cmp(bigNum_, rhs.bigNum_);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator<=(const BigNum& rhs) const {
  return compare(rhs) <= 0;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator<(const BigNum& rhs) const {
  return compare(rhs) < 0;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator>=(const BigNum& rhs) const {
  return compare(rhs) >= 0;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator>(const BigNum& rhs) const {
  return compare(rhs) > 0;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator==(const BigNum& rhs) const {
  return compare(rhs) == 0;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
bool BigNum::operator!=(const BigNum& rhs) const {
  return compare(rhs) != 0;
}
/***********************************************************************//**
	@brief 文字列に変換する
	@return 数値を表す文字列
***************************************************************************/
std::string BigNum::toString() const {
  auto pt = BN_bn2dec(bigNum_);
  std::string result(pt);
  OPENSSL_free(pt);
  return result;
}
/***********************************************************************//**
	@brief デフォルトコンストラクタ
***************************************************************************/
BigNum::Ctx::Ctx()
  : ctx_(BN_CTX_new())
{
}
/***********************************************************************//**
	@brief デストラクタ
***************************************************************************/
BigNum::Ctx::~Ctx() {
  BN_CTX_free(ctx_);
}
/***********************************************************************//**
	$Id$
***************************************************************************/
}
